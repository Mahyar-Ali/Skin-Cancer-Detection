# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HwLIMyVjX-U_L7K5r2GSyXySDJR5vBIm

#First Approach
"""

!wget https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/train.zip

!unzip train.zip

!wget https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/valid.zip

!unzip valid.zip

!wget https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/skin-cancer/test.zip

!unzip test.zip

from sklearn.datasets import load_files
from keras.utils import np_utils
import numpy as np
from glob import glob

def load_dataset(path):
  data = load_files(path)
  image_files = np.array(data['filenames'])
  image_label = np_utils.to_categorical(np.array(data['target']),3)
  return image_files,image_label

train_files,train_targets = load_dataset('train/')

test_files,test_targets = load_dataset('test/')

valid_files,valid_targets = load_dataset('valid/')

tumor_types = ['melanoma','nevus','seborrheic_keratsis']

#Visualizing some Images
import matplotlib.pyplot as plt
import cv2

def displayImage(img_path,ax,img_target):
  image = cv2.imread(img_path)
  ax.imshow(cv2.cvtColor(image,cv2.COLOR_BGR2RGB))
  ax.set_title(tumor_types[np.argmax(img_target)])

choice = np.random.choice(train_files.shape[0],5)
figure = plt.figure(figsize=(20,10))
for index,_choice in enumerate(choice):
      ax = figure.add_subplot(3,4,index+1,xticks=[],yticks=[])
      displayImage(train_files[_choice],ax,train_targets[_choice])

def preprocess_initial(dataset):
    data_set = np.zeros([dataset.shape[0],299,299,3])
    for index,img_path in enumerate(dataset):
          img = cv2.imread(img_path)
          img_res = cv2.resize(img,dsize=(299,299),interpolation= cv2.INTER_AREA) 
          data_set[index,:,:,:] = img_res
    return data_set

#Comparing an image
test_ = preprocess_initial(train_files[1:2])

figure = plt.figure(figsize=(20,10))
ax = figure.add_subplot(3,4,1)
ax.imshow(test_[0]/255)
ax.set_title("New")
image=cv2.imread(train_files[1])
ax1 = figure.add_subplot(3,4,2)
ax1.imshow(image)
ax1.set_title("Old")

from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_v3 import preprocess_input
from keras.layers import Input

Input_tensor = Input(shape=(299,299,3))
inception_model = InceptionV3(include_top=False,weights='imagenet',input_tensor = Input_tensor)

inception_model.summary()

bottle_neck_train_set = inception_model.predict(preprocess_input(preprocess_initial(train_files)),verbose=1)

bottle_neck_test_set = inception_model.predict(preprocess_input(preprocess_initial(test_files)),verbose=1)

bottle_neck_valid_set = inception_model.predict(preprocess_input(preprocess_initial(valid_files)),verbose=1)

print(bottle_neck_train_set.shape)
print(bottle_neck_test_set.shape)
print(bottle_neck_valid_set.shape)

from keras.models import Sequential
from keras.layers import GlobalAveragePooling2D,BatchNormalization,Dense,Dropout
from keras import regularizers

#Now build our transfer Learning Model
model = Sequential()
model.add(GlobalAveragePooling2D(input_shape=(8,8,2048)))  #0.95 0.0001
model.add(BatchNormalization())

model.add(Dense(512,activation='relu',kernel_regularizer=regularizers.l2(0.0001)))
model.add(BatchNormalization())
model.add(Dropout(0.95))

model.add(Dense(3,activation='softmax'))
model.summary()

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

from keras.callbacks import ModelCheckpoint
chkp = ModelCheckpoint('skin.cancer.models.best.hdf5',verbose=1,save_best_only=True)

model.fit(bottle_neck_train_set,train_targets,batch_size=64,epochs=300,verbose=1
          ,callbacks=[chkp],shuffle=True,validation_data=(bottle_neck_valid_set,valid_targets))

model.load_weights("skin.cancer.models.best.hdf5")
_pred = np.argmax(model.predict(bottle_neck_test_set,verbose=1),axis=1)
original_pred = np.argmax(test_targets,axis=1)
true=[]
for index in range(len(_pred)):
      if(original_pred[index]==_pred[index]):
          true.append(1)
      else:
        true.append(0)
print("Test Set Accuracy {}%".format((sum(true)/len(true))*100))

weights = model.get_weights()

"""# Xception"""

from keras.applications.xception import Xception
from keras.applications.xception import preprocess_input
from keras import applications
from keras.layers import Input

input_shape_ = Input(shape=(299,299,3))
model_1 = Xception(include_top = False , input_tensor=input_shape_)

bottle_neck_train_2 = model_1.predict(applications.xception.preprocess_input(preprocess_initial(train_files)),verbose=1)

bottle_neck_test_2 = model_1.predict(applications.xception.preprocess_input(preprocess_initial(test_files)),verbose=1)

bottle_neck_valid_2 = model_1.predict(applications.xception.preprocess_input(preprocess_initial(valid_files)),verbose=1)

bottle_neck_train_2.shape

from keras.models import Sequential
from keras.layers import GlobalAveragePooling2D,BatchNormalization,Dense,Dropout
from keras import regularizers

#Now build our transfer Learning Model
model_2 = Sequential()
model_2.add(GlobalAveragePooling2D(input_shape=(10,10,2048)))  #0.95 0.0001
model_2.add(BatchNormalization())

model_2.add(Dense(512,activation='relu',kernel_regularizer=regularizers.l2(0.0001)))
model_2.add(BatchNormalization())
model_2.add(Dropout(0.95))


model_2.add(Dense(3,activation='softmax'))
model_2.summary()

from keras.optimizers import Adam
model_2.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

from keras.callbacks import ModelCheckpoint
chkp = ModelCheckpoint('skin.cancer.xception.models.best.hdf5',verbose=1,save_best_only=True)

model_2.fit(bottle_neck_train_2,train_targets,batch_size=128,epochs=300,verbose=1
          ,callbacks=[chkp],shuffle=True,validation_data=(bottle_neck_valid_2,valid_targets))

model_2.load_weights("skin.cancer.xception.models.best.hdf5")
_pred = np.argmax(model_2.predict(bottle_neck_test_2,verbose=1),axis=1)
original_pred = np.argmax(test_targets,axis=1)
true=[]
for index in range(len(_pred)):
      if(original_pred[index]==_pred[index]):
          true.append(1)
      else:
        true.append(0)
print("Test Set Accuracy {}%".format((sum(true)/len(true))*100))

"""# Second Approach:-"""

from keras.models import Sequential

inception_model_1 = InceptionV3(include_top=False)

lr_dict = {}
for layer in inception_model_1.layers:
  lr_dict[layer.name] = 0.0008

x = inception_model_1.output

x = GlobalAveragePooling2D(name='new_pool_1')(x)
x = BatchNormalization(name='new_batch_1')(x)
x = Dropout(0.3,name='new_drop_1')(x)

x = Dense(512,activation='relu',name='new_dense_1')(x)
x = BatchNormalization(name='new_batch_2')(x)
x = Dropout(0.3,name='new_drop_2')(x)


prediction = Dense(3,activation='softmax',name='new_dene_2')(x)
model_1 = Model(inputs=inception_model_1.input,outputs=prediction)

layers = ['new_pool_1','new_batch_1','new_dense_1','new_batch_2','new_drop_2','new_dene_2']
for layer in layers:
    lr_dict[layer] = 0.0002*10

!pip install keras-lr-multiplier

from keras_lr_multiplier import LRMultiplier

model_1.summary()

model_1.compile(loss='categorical_crossentropy',optimizer=LRMultiplier('adam', lr_dict),metrics=['accuracy'])

train_set_1 = preprocess_input(preprocess_initial(train_files))

test_set_1 = preprocess_input(preprocess_initial(test_files))

valid_set_1 = preprocess_input(preprocess_initial(valid_files))

layers = ['new_pool_1','new_batch_1','new_dense_1','new_batch_2','new_drop_2','new_dene_2']
model_1.get_layer('new_dene_2').set_weights([np.array(weights[10],dtype=np.float32),np.zeros([3],dtype=np.float32)])
model_1.get_layer('new_dense_1').set_weights([np.array(weights[4],dtype=np.float32),np.zeros([512],dtype=np.float32)])

# the first 249 layers and unfreeze the rest:
for layer in model_1.layers[:249]:
   layer.trainable = False
for layer in model_1.layers[249:]:
   layer.trainable = True

chkp = ModelCheckpoint('skin_2.cancer.models.best.hdf5',verbose=1)
# print(weights[10])
# print(model_1.get_layer('new_dene_2').get_weights()[0])

model_1.load_weights('skin_2.cancer.models.best.hdf5')

model_1.fit(bottle_neck_train_set_1,train_targets,batch_size=64,epochs=300,verbose=1
          ,callbacks=[chkp],shuffle=True,validation_data=(bottle_neck_valid_set_1,valid_targets))

model_1.load_weights('skin_2.cancer.models.best.hdf5')
_pred = np.argmax(model_1.predict(bottle_neck_train_set_1),axis=1)
true_pred = np.argmax(train_targets,axis=1)
true=[]
for index in range(len(_pred)):
      if(true_pred[index]==_pred[index]):
          true.append(1)
      else:
        true.append(0)
print("Test Set Accuracy {}%".format((sum(true)/len(true))*100))
